{"version":3,"file":"static/js/643.d9704f67.chunk.js","mappings":"iXAQMA,EAAOC,EAAAA,GAAAA,IAAH,8JAC6BC,EAAAA,EAAAA,QAMjCC,EAAaF,EAAAA,GAAAA,OAAH,iUACCC,EAAAA,EAAAA,UAKNA,EAAAA,EAAAA,iBACWA,EAAAA,EAAAA,aAOTA,EAAAA,EAAAA,cAIPE,EAAQH,EAAAA,GAAAA,MAAH,yUACMC,EAAAA,EAAAA,UAKNA,EAAAA,EAAAA,iBACWA,EAAAA,EAAAA,aAOTA,EAAAA,EAAAA,cAGPG,EAAOJ,EAAAA,GAAAA,KAAH,qEAKK,SAASK,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MAEbC,EAAS,GAEb,GAA4CC,EAAAA,EAAAA,UAAS,MAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAA8BF,EAAAA,EAAAA,UAAS,CACrCG,aAAa,EACbC,IAAK,KACLC,KAAM,EACNC,WACE,2EALJ,eAAOC,EAAP,KAAgBC,EAAhB,KAsBMC,EAAe,SAAAC,GACnBX,EAASW,GAuCLC,EAAW,mCAAG,WAAMC,GAAN,iEAClBf,EACEgB,EAAAA,EAAAA,aAA4BC,KAAKC,UAAU,CAAEC,KAAMJ,MAFnC,2CAAH,sDAMjB,OACE,+BACE,UAACtB,EAAD,YACE,UAAC,IAAD,CAAK2B,aAAa,OAAlB,WACE,SAAC,IAAD,CAAKC,MAAM,MAAX,UACE,SAAC,IAAD,CACEC,IAAKZ,EAAQD,WACbc,MAAO,CACLF,MAAO,OACPG,OAAQ,OACRC,UAAW,cAKjB,UAAC3B,EAAD,CAAM4B,GAAG,OAAOC,SA/BH,SAAAC,GAEnB,GADAA,EAAEC,iBACGzB,EAAL,CACA,IAAM0B,EAAS,IAAIC,WACnBD,EAAOE,cAAc5B,GACrB0B,EAAOG,UAAY,WACjBnB,EAAYgB,EAAOI,SAErBJ,EAAOK,QAAU,eAuBX,WACE,SAACtC,EAAD,CACEuC,KAAK,OACLC,KAAK,SACLC,UAAQ,EACRC,OAAO,UACPC,SAjDa,SAAAZ,GACvB,IAAIa,EAAMC,IAAIC,gBAAgBf,EAAEgB,OAAOC,MAAM,IAEvCC,EAASlB,EAAEgB,OAAOC,MAAM,GAC9BxC,EAAkByC,GAClBnC,GAAW,kBACND,GADK,IAERH,IAAKkC,EACLnC,aAAa,SA2CP,SAACV,EAAD,CAAYmD,UAAW3C,EAAgBgC,KAAK,SAA5C,8DAMH1B,EAAQJ,cACP,UAAC,IAAD,CAAK0C,QAAQ,QAAQ3B,MAAM,MAA3B,WACE,SAAC,IAAD,CACE4B,IAAKrC,EACLsC,MAAOxC,EAAQH,IACfc,MAAO,IACPG,OAAQ,IACR2B,OAAQ,GACRC,MAAO,CAAC,IAAK,IAAK,IAAK,IACvBC,OAAQ,EACRC,MAAO5C,EAAQF,QAEjB,SAAC,IAAD,CACE,aAAW,aACX+C,MAAO7C,EAAQF,KACfgD,IAAK,EACLC,IAAK,GACLC,KAAM,GACNlB,SA3GS,SAACmB,EAAOJ,GAC3B5C,GAAW,kBACND,GADK,IAERF,KAAM+C,SA0GA,UAAC,IAAD,YACE,SAAC,IAAD,CAAQK,QAAQ,YAAYC,QAvGnB,WACnBlD,GAAW,kBACND,GADK,IAERJ,aAAa,MAoGL,qBAGA,SAAC,IAAD,CAAQuD,QA/FD,SAAAjC,GACjB,GAAIhB,EAAc,CAChB,IACMH,EADeP,EAAO4D,yBACIC,YAEhCpD,GAAW,kBACND,GADK,IAERH,IAAK,KACLD,aAAa,EACbG,WAAYA,OAsFN","sources":["components/Header/Avatar.js"],"sourcesContent":["import { Avatar, Box, Button, Slider } from '@material-ui/core';\nimport { useState } from 'react';\nimport AvatarEditor from 'react-avatar-editor';\nimport authOperations from '../../redux/auth/authOperations';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport { layoutStyles } from '../../stlyles/layoutStyles';\n\nconst BoxA = styled.div`\n  @media only screen and (min-width: ${layoutStyles.tablet}) {\n    display: flex;\n    justify-content: space-around;\n    align-items: stretch;\n  } ;\n`;\nconst ButtonForm = styled.button`\n  font-family: ${layoutStyles.gothamPro};\n  font-size: 14px;\n  font-weight: 700;\n  line-height: 13px;\n  letter-spacing: 0.04em;\n  color: ${layoutStyles.placeholderColor};\n  border: 1px solid ${layoutStyles.activeButton};\n  background-color: transparent;\n  padding: 7px;\n  border-radius: 5px;\n  width: 100px;\n  cursor: pointer;\n  &:hover {\n    color: ${layoutStyles.activeButton};\n  }\n`;\n\nconst Input = styled.input`\n  font-family: ${layoutStyles.gothamPro};\n  font-size: 14px;\n  font-weight: 700;\n  line-height: 13px;\n  letter-spacing: 0.04em;\n  color: ${layoutStyles.placeholderColor};\n  border: 1px solid ${layoutStyles.activeButton};\n  background-color: transparent;\n  padding: 10px;\n  border-radius: 5px;\n  cursor: pointer;\n  margin-bottom: 10px;\n  &:hover {\n    color: ${layoutStyles.activeButton};\n  }\n`;\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport default function AvatarUpload() {\n  const dispatch = useDispatch();\n\n  var editor = '';\n\n  const [selectedAvatar, setselectedAvatar] = useState(null);\n  const [picture, setPicture] = useState({\n    cropperOpen: false,\n    img: null,\n    zoom: 2,\n    croppedImg:\n      'https://upload.wikimedia.org/wikipedia/commons/0/09/Man_Silhouette.png',\n  });\n\n  const handleSlider = (event, value) => {\n    setPicture({\n      ...picture,\n      zoom: value,\n    });\n  };\n\n  const handleCancel = () => {\n    setPicture({\n      ...picture,\n      cropperOpen: false,\n    });\n  };\n\n  const setEditorRef = ed => {\n    editor = ed;\n  };\n\n  const handleSave = e => {\n    if (setEditorRef) {\n      const canvasScaled = editor.getImageScaledToCanvas();\n      const croppedImg = canvasScaled.toDataURL();\n\n      setPicture({\n        ...picture,\n        img: null,\n        cropperOpen: false,\n        croppedImg: croppedImg,\n      });\n    }\n  };\n\n  const handleFileChange = e => {\n    let url = URL.createObjectURL(e.target.files[0]);\n\n    const avatar = e.target.files[0];\n    setselectedAvatar(avatar);\n    setPicture({\n      ...picture,\n      img: url,\n      cropperOpen: true,\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!selectedAvatar) return;\n    const reader = new FileReader();\n    reader.readAsDataURL(selectedAvatar);\n    reader.onloadend = () => {\n      uploadImage(reader.result);\n    };\n    reader.onerror = () => {};\n  };\n  const uploadImage = async base64EncodedImage => {\n    dispatch(\n      authOperations.updateAvatar(JSON.stringify({ data: base64EncodedImage }))\n    );\n  };\n\n  return (\n    <>\n      <BoxA>\n        <Box marginBottom=\"10px\">\n          <Box width=\"35%\">\n            <Avatar\n              src={picture.croppedImg}\n              style={{\n                width: '100%',\n                height: 'auto',\n                objectFit: 'cover',\n              }}\n            />\n          </Box>\n\n          <Form id=\"form\" onSubmit={handleSubmit}>\n            <Input\n              type=\"file\"\n              name=\"avatar\"\n              multiple\n              accept=\"image/*\"\n              onChange={handleFileChange}\n            />\n            <ButtonForm disabled={!selectedAvatar} type=\"submit\">\n              Змінити\n            </ButtonForm>\n          </Form>\n        </Box>\n\n        {picture.cropperOpen && (\n          <Box display=\"block\" width=\"50%\">\n            <AvatarEditor\n              ref={setEditorRef}\n              image={picture.img}\n              width={200}\n              height={200}\n              border={50}\n              color={[255, 255, 255, 0.6]}\n              rotate={0}\n              scale={picture.zoom}\n            />\n            <Slider\n              aria-label=\"raceSlider\"\n              value={picture.zoom}\n              min={1}\n              max={10}\n              step={0.1}\n              onChange={handleSlider}\n            ></Slider>\n            <Box>\n              <Button variant=\"contained\" onClick={handleCancel}>\n                Cancel\n              </Button>\n              <Button onClick={handleSave}>Save</Button>\n            </Box>\n          </Box>\n        )}\n      </BoxA>\n    </>\n  );\n}\n"],"names":["BoxA","styled","layoutStyles","ButtonForm","Input","Form","AvatarUpload","dispatch","useDispatch","editor","useState","selectedAvatar","setselectedAvatar","cropperOpen","img","zoom","croppedImg","picture","setPicture","setEditorRef","ed","uploadImage","base64EncodedImage","authOperations","JSON","stringify","data","marginBottom","width","src","style","height","objectFit","id","onSubmit","e","preventDefault","reader","FileReader","readAsDataURL","onloadend","result","onerror","type","name","multiple","accept","onChange","url","URL","createObjectURL","target","files","avatar","disabled","display","ref","image","border","color","rotate","scale","value","min","max","step","event","variant","onClick","getImageScaledToCanvas","toDataURL"],"sourceRoot":""}