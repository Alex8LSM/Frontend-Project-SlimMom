{"version":3,"file":"static/js/643.97639ca2.chunk.js","mappings":"wWAWMA,EAAOC,EAAAA,GAAAA,IAAH,8JAC6BC,EAAAA,EAAAA,QAMjCC,EAAaF,EAAAA,GAAAA,OAAH,iUACCC,EAAAA,EAAAA,UAKNA,EAAAA,EAAAA,iBACWA,EAAAA,EAAAA,aAOTA,EAAAA,EAAAA,cAIPE,EAAQH,EAAAA,GAAAA,MAAH,yUACMC,EAAAA,EAAAA,UAKNA,EAAAA,EAAAA,iBACWA,EAAAA,EAAAA,aAOTA,EAAAA,EAAAA,cAGPG,EAAOJ,EAAAA,GAAAA,KAAH,qEAKK,SAASK,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MAEbC,EAAS,GAEb,GAA8BC,EAAAA,EAAAA,UAAS,CACrCC,aAAa,EACbC,IAAK,KACLC,KAAM,EACNC,WACE,2EALJ,eAAOC,EAAP,KAAgBC,EAAhB,KAsBMC,EAAe,SAAAC,GACnBT,EAASS,GAsCX,OACE,+BACE,UAAClB,EAAD,YACE,UAAC,IAAD,CAAKmB,aAAa,OAAlB,WACE,SAAC,IAAD,CAAKC,MAAM,MAAX,UACE,SAAC,IAAD,CACEC,IAAKN,EAAQD,WACbQ,MAAO,CACLF,MAAO,OACPG,OAAQ,OACRC,UAAW,cAKjB,UAACnB,EAAD,CAAMoB,GAAG,OAAOC,SA1BH,SAAAC,GACnBA,EAAEC,iBAEFrB,EACEsB,EAAAA,EAAAA,aACEC,KAAKC,UAAU,CAAEC,OAAQjB,EAAQD,eAGrCmB,EAAAA,GAAAA,QAAc,+FAAqB,CAAEC,SAAU,gBAkBzC,WACE,SAAC9B,EAAD,CACE+B,KAAK,OACLC,KAAK,SACLC,UAAQ,EACRC,OAAO,UACPC,SA1Ca,SAAAZ,GACvB,IAAIa,EAAMC,IAAIC,gBAAgBf,EAAEgB,OAAOC,MAAM,IAE7C5B,GAAW,kBACND,GADK,IAERH,IAAK4B,EACL7B,aAAa,SAsCP,SAACR,EAAD,CAAYgC,KAAK,SAAjB,8DAIHpB,EAAQJ,cACP,UAAC,IAAD,CAAKkC,QAAQ,QAAQzB,MAAM,MAA3B,WACE,SAAC,IAAD,CACE0B,IAAK7B,EACL8B,MAAOhC,EAAQH,IACfQ,MAAO,IACPG,OAAQ,IACRyB,OAAQ,GACRC,MAAO,CAAC,IAAK,IAAK,IAAK,IACvBC,OAAQ,EACRC,MAAOpC,EAAQF,QAEjB,SAAC,IAAD,CACE,aAAW,aACXuC,MAAOrC,EAAQF,KACfwC,IAAK,EACLC,IAAK,GACLC,KAAM,GACNhB,SAlGS,SAACiB,EAAOJ,GAC3BpC,GAAW,kBACND,GADK,IAERF,KAAMuC,SAiGA,UAAC,IAAD,YACE,SAAC,IAAD,CAAQK,QAAQ,YAAYC,QA9FnB,WACnB1C,GAAW,kBACND,GADK,IAERJ,aAAa,MA2FL,qBAGA,SAAC,IAAD,CAAQ+C,QAtFD,SAAA/B,GACjB,GAAIV,EAAc,CAChB,IAAM0C,EAAelD,EAAOmD,yBAE5B7C,EAAQH,IAAM+C,EAAaE,YAC3B7C,GAAW,kBACND,GADK,IAGRJ,aAAa,EACbG,WAAYC,EAAQH,SA6Ed","sources":["components/Header/Avatar.js"],"sourcesContent":["import { Avatar, Box, Button, Slider } from '@material-ui/core';\nimport { useState } from 'react';\nimport AvatarEditor from 'react-avatar-editor';\nimport authOperations from '../../redux/auth/authOperations';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport { layoutStyles } from '../../stlyles/layoutStyles';\nimport { toast } from 'react-toastify';\n\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst BoxA = styled.div`\n  @media only screen and (min-width: ${layoutStyles.tablet}) {\n    display: flex;\n    justify-content: space-around;\n    align-items: stretch;\n  } ;\n`;\nconst ButtonForm = styled.button`\n  font-family: ${layoutStyles.gothamPro};\n  font-size: 14px;\n  font-weight: 700;\n  line-height: 13px;\n  letter-spacing: 0.04em;\n  color: ${layoutStyles.placeholderColor};\n  border: 1px solid ${layoutStyles.activeButton};\n  background-color: transparent;\n  padding: 7px;\n  border-radius: 5px;\n  width: 100px;\n  cursor: pointer;\n  &:hover {\n    color: ${layoutStyles.activeButton};\n  }\n`;\n\nconst Input = styled.input`\n  font-family: ${layoutStyles.gothamPro};\n  font-size: 14px;\n  font-weight: 700;\n  line-height: 13px;\n  letter-spacing: 0.04em;\n  color: ${layoutStyles.placeholderColor};\n  border: 1px solid ${layoutStyles.activeButton};\n  background-color: transparent;\n  padding: 10px;\n  border-radius: 5px;\n  cursor: pointer;\n  margin-bottom: 10px;\n  &:hover {\n    color: ${layoutStyles.activeButton};\n  }\n`;\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport default function AvatarUpload() {\n  const dispatch = useDispatch();\n\n  var editor = '';\n\n  const [picture, setPicture] = useState({\n    cropperOpen: false,\n    img: null,\n    zoom: 2,\n    croppedImg:\n      'https://upload.wikimedia.org/wikipedia/commons/0/09/Man_Silhouette.png',\n  });\n\n  const handleSlider = (event, value) => {\n    setPicture({\n      ...picture,\n      zoom: value,\n    });\n  };\n\n  const handleCancel = () => {\n    setPicture({\n      ...picture,\n      cropperOpen: false,\n    });\n  };\n\n  const setEditorRef = ed => {\n    editor = ed;\n  };\n\n  const handleSave = e => {\n    if (setEditorRef) {\n      const canvasScaled = editor.getImageScaledToCanvas();\n\n      picture.img = canvasScaled.toDataURL();\n      setPicture({\n        ...picture,\n\n        cropperOpen: false,\n        croppedImg: picture.img,\n      });\n    }\n  };\n\n  const handleFileChange = e => {\n    let url = URL.createObjectURL(e.target.files[0]);\n\n    setPicture({\n      ...picture,\n      img: url,\n      cropperOpen: true,\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    dispatch(\n      authOperations.updateAvatar(\n        JSON.stringify({ avatar: picture.croppedImg })\n      )\n    );\n    toast.success('Світлину змінено!', { position: 'top-center' });\n  };\n\n  return (\n    <>\n      <BoxA>\n        <Box marginBottom=\"10px\">\n          <Box width=\"35%\">\n            <Avatar\n              src={picture.croppedImg}\n              style={{\n                width: '100%',\n                height: 'auto',\n                objectFit: 'cover',\n              }}\n            />\n          </Box>\n\n          <Form id=\"form\" onSubmit={handleSubmit}>\n            <Input\n              type=\"file\"\n              name=\"avatar\"\n              multiple\n              accept=\"image/*\"\n              onChange={handleFileChange}\n            />\n            <ButtonForm type=\"submit\">Змінити</ButtonForm>\n          </Form>\n        </Box>\n\n        {picture.cropperOpen && (\n          <Box display=\"block\" width=\"50%\">\n            <AvatarEditor\n              ref={setEditorRef}\n              image={picture.img}\n              width={200}\n              height={200}\n              border={50}\n              color={[255, 255, 255, 0.6]}\n              rotate={0}\n              scale={picture.zoom}\n            />\n            <Slider\n              aria-label=\"raceSlider\"\n              value={picture.zoom}\n              min={1}\n              max={10}\n              step={0.1}\n              onChange={handleSlider}\n            ></Slider>\n            <Box>\n              <Button variant=\"contained\" onClick={handleCancel}>\n                Cancel\n              </Button>\n              <Button onClick={handleSave}>Save</Button>\n            </Box>\n          </Box>\n        )}\n      </BoxA>\n    </>\n  );\n}\n"],"names":["BoxA","styled","layoutStyles","ButtonForm","Input","Form","AvatarUpload","dispatch","useDispatch","editor","useState","cropperOpen","img","zoom","croppedImg","picture","setPicture","setEditorRef","ed","marginBottom","width","src","style","height","objectFit","id","onSubmit","e","preventDefault","authOperations","JSON","stringify","avatar","toast","position","type","name","multiple","accept","onChange","url","URL","createObjectURL","target","files","display","ref","image","border","color","rotate","scale","value","min","max","step","event","variant","onClick","canvasScaled","getImageScaledToCanvas","toDataURL"],"sourceRoot":""}