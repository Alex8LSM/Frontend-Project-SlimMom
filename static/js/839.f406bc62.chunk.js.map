{"version":3,"file":"static/js/839.f406bc62.chunk.js","mappings":"8TAQe,SAASA,IACtB,IAAMC,EAAMC,EAAAA,GAAAA,IAAH,iDAIHC,GAAoBC,EAAAA,EAAAA,IAAH,uyEAwIjBC,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,KAAMF,EAAAA,KAEHG,IAAI,EAAG,qJACPC,IAAI,GAAI,sJACRC,SAAS,0FACZC,MAAON,EAAAA,KAEJM,MAAM,qLACND,SAAS,0FACZE,SAAUP,EAAAA,KAEPG,IAAI,EAAG,0QACPK,QACCC,OAAO,eACP,4QAEDD,QACCC,OAAO,eACP,wRAEDD,QACCC,OAAO,aACP,6OAEDJ,SAAS,4FAGRK,GAAWC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOV,EAAP,KAAaW,EAAb,KACA,GAA0BD,EAAAA,EAAAA,UAAS,IAAnC,eAAON,EAAP,KAAcQ,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOL,EAAP,KAAiBQ,EAAjB,KAEMC,EAAQ,mCAAG,WAAMC,GAAN,iEACfP,EAASQ,EAAAA,EAAAA,SAAwB,CAAEhB,KAAAA,EAAMI,MAAAA,EAAOC,SAAAA,KAChDM,EAAQ,IACRC,EAAS,IACTC,EAAY,IAJG,2CAAH,sDAOd,OACE,UAACpB,EAAD,YACE,SAAC,KAAD,CACEwB,cAAe,CACbjB,KAAM,GACNI,MAAO,GACPC,SAAU,IAEZa,gBAAc,EACdJ,SAAUA,EACVjB,iBAAkBA,EARpB,SAUG,gBACCsB,EADD,EACCA,OACAC,EAFD,EAECA,OACAC,EAHD,EAGCA,QACAC,EAJD,EAICA,aACAC,EALD,EAKCA,WACAC,EAND,EAMCA,aAND,OAQC,iBAAKC,UAAU,OAAf,WACE,iBAAKA,UAAU,aAAf,WACE,kBACEC,KAAM,OACN1B,KAAM,OACN2B,SAAUL,EACVM,OAAQL,EACRM,MAAOV,EAAOnB,KACd8B,YAAY,IACZL,UAAU,WAEZ,gBAAKA,UAAU,SACf,kBAAOM,QAAS,OAAQN,UAAU,cAAlC,mCAGCJ,EAAQrB,MAAQoB,EAAOpB,OAAQ,uBAAIoB,EAAOpB,WAE7C,iBAAKyB,UAAU,aAAf,WACE,kBACEC,KAAM,QACN1B,KAAM,QACN2B,SAAUL,EACVM,OAAQL,EACRM,MAAOV,EAAOf,MACd0B,YAAY,IACZL,UAAU,WAEZ,kBAAOM,QAAS,QAASN,UAAU,cAAnC,0GAGCJ,EAAQjB,OAASgB,EAAOhB,QAAS,uBAAIgB,EAAOhB,YAE/C,iBAAKqB,UAAU,aAAf,WACE,kBACEC,KAAM,WACN1B,KAAM,WACN2B,SAAUL,EACVM,OAAQL,EACRM,MAAOV,EAAOd,SACdyB,YAAY,IACZL,UAAU,QACVO,aAAa,MACbC,GAAG,oBAEL,kBAAOF,QAAS,WAAYN,UAAU,cAAtC,oDAGCJ,EAAQhB,UAAYe,EAAOf,WAAY,uBAAIe,EAAOf,eAGrD,iBAAKoB,UAAU,cAAf,WACE,mBAAQA,UAAU,SAASS,QAASV,EAAcE,KAAM,SAAxD,yGAIA,SAAC,KAAD,CAAMS,GAAI,CAAEC,SAAU,UAAtB,UACE,mBAAQX,UAAU,SAASC,KAAK,SAAhC,8DAQV,SAAC/B,EAAD,OC9QN,IAAM0C,EAAkB3C,EAAAA,GAAAA,GAAH,mVAgBN,SAAS4C,IACtB,OACE,4BACE,SAACD,EAAD,4EACA,SAAC7C,EAAD","sources":["components/Forms/RegisterForm.jsx","pages/RegistrationPage/RegistrationPage.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { Link } from 'react-router-dom';\nimport authOperations from 'redux/auth/authOperations';\nimport styled, { createGlobalStyle } from 'styled-components';\n\nexport default function RegisterForm() {\n  const Div = styled.div`\n    margin-top: 60px;\n  `;\n\n  const RegisterFormStyle = createGlobalStyle`\n\n  .Form{\n    display: flex;\n    flex-direction: column;\n    text-align: center;\n    margin-bottom: 100px;\n}\n\n\n.InputBlock {\n  position: relative;\n  margin-bottom: 40px;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n\n\n.Cut {\n  background-color: #FFFFF;\n  border-radius: 10px;\n  height: 20px;\n  left: 20px;\n  position: absolute;\n  top: -20px;\n  transform: translateY(0);\n  transition: transform 200ms;\n  width: 76px;\n}\n\n.Input:focus ~ .Cut,\n.Input:not(:placeholder-shown) ~ .Cut {\n  transform: translateY(8px);\n}\n\n.Placeholder {\n  color: #9B9FAA;\n  left: 3px;\n  line-height: 17px;\n  font-weight: 700;\n  font-size: 14px;\n  pointer-events: none;\n  position: absolute;\n  transform-origin: 0 50%;\n  transition: transform 200ms, color 200ms;\n  top: 3px;\n}\n\n.Input:focus ~ .Placeholder,\n.Input:not(:placeholder-shown) ~ .Placeholder {\n  transform: translateY(-25px) translateX(2px) scale(0.75);\n}\n\n.Input:not(:placeholder-shown) ~ .Placeholder {\n  color: #808097;\n}\n\n.Input:focus ~ .Placeholder {\n  color: #dc2f55;\n}\n\n.InputBlock input {\n  width: 280px;\n  height: 36px;\n  border: none;\n  border-bottom: 1px solid #E0E0E0;\n  background: transparent;\n}\n\n.InputBlock p {\n    font-size: 12px;\n    color: red;\n}\n\n\n.FormButtons{\n    display: flex;\n    flex-direction: column;\n}\n\n.Button{\n    margin-top: 20px;\n    margin-left: auto;\n    margin-right: auto;\n    padding-top: 13px;\n    padding-bottom: 13px;\n    width: 180px;\n    background: #FC842D;\n    box-shadow: 0px 4px 10px rgba(252, 132, 45, 0.5);\n    border: none;\n    border-radius: 30px;\n    font-weight: 700;\n    font-size: 14px;\n    letter-spacing: 0.04em;\n    color: #FFFFFF;\n\n}\n\n.Button:hover,\n.Button:focus{\n    background: #FFFFFF;\n    border: 2px solid #FC842D;\n    border-radius: 30px;\n    color: #FC842D;\n    cursor: pointer;\n}\n\n @media screen and (min-device-width: 768px) {\n    .Form{\n    margin-left: 32px;\n    text-align: start;\n    }\n\n    .FormButtons{\n    display: block;\n    margin-bottom: 400px;\n    }\n\n    .Button{\n    margin-right: 32px;\n    }\n\n    .InputBlock {\n      margin-left: 0;\n      margin-right: 0;\n    }\n  }\n\n  @media screen and (min-device-width: 1199px) {\n    .FormButtons{\n    margin-bottom: 180px;\n    }\n  }\n`;\n\n  const validationSchema = yup.object().shape({\n    name: yup\n      .string()\n      .min(2, 'Має бути 2 символа або більше!')\n      .max(50, 'Має бути 50 символів або менше!')\n      .required(\"Обов'язкове поле\"),\n    email: yup\n      .string()\n      .email('Невірна адреса електронної пошти')\n      .required(\"Обов'язкове поле\"),\n    password: yup\n      .string()\n      .min(8, 'Пароль повинен складатися не менше, ніж з 8 символів')\n      .matches(\n        RegExp('(.*[a-z].*)'),\n        'Пароль повинен містити принаймні одну малу літеру'\n      )\n      .matches(\n        RegExp('(.*[A-Z].*)'),\n        'Пароль повинен містити принаймні одну велику літеру'\n      )\n      .matches(\n        RegExp('(.*\\\\d.*)'),\n        'Пароль повинен містити принаймні одну цифру'\n      )\n      .required(\"Обов'язкове поле\"),\n  });\n\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const onSubmit = async e => {\n    dispatch(authOperations.register({ name, email, password }));\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  return (\n    <Div>\n      <Formik\n        initialValues={{\n          name: '',\n          email: '',\n          password: '',\n        }}\n        validateOnBlur\n        onSubmit={onSubmit}\n        validationSchema={validationSchema}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n        }) => (\n          <div className=\"Form\">\n            <div className=\"InputBlock\">\n              <input\n                type={'text'}\n                name={'name'}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.name}\n                placeholder=\" \"\n                className=\"Input\"\n              />\n              <div className=\"Cut\"></div>\n              <label htmlFor={'name'} className=\"Placeholder\">\n                Ім'я *\n              </label>\n              {touched.name && errors.name && <p>{errors.name}</p>}\n            </div>\n            <div className=\"InputBlock\">\n              <input\n                type={'email'}\n                name={'email'}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.email}\n                placeholder=\" \"\n                className=\"Input\"\n              />\n              <label htmlFor={'email'} className=\"Placeholder\">\n                Електронна пошта*\n              </label>\n              {touched.email && errors.email && <p>{errors.email}</p>}\n            </div>\n            <div className=\"InputBlock\">\n              <input\n                type={'password'}\n                name={'password'}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.password}\n                placeholder=\" \"\n                className=\"Input\"\n                autoComplete=\"off\"\n                id=\"password-input\"\n              />\n              <label htmlFor={'password'} className=\"Placeholder\">\n                Пароль *\n              </label>\n              {touched.password && errors.password && <p>{errors.password}</p>}\n            </div>\n\n            <div className=\"FormButtons\">\n              <button className=\"Button\" onClick={handleSubmit} type={'submit'}>\n                Зареєструватися\n              </button>\n\n              <Link to={{ pathname: '/login' }}>\n                <button className=\"Button\" type=\"button\">\n                  Увійти\n                </button>\n              </Link>\n            </div>\n          </div>\n        )}\n      </Formik>\n      <RegisterFormStyle />\n    </Div>\n  );\n}\n","import RegisterForm from 'components/Forms/RegisterForm';\nimport styled from 'styled-components';\n\nconst RegisterWrapper = styled.h1`\n  margin-top: 40px;\n  font-family: 'Verdana';\n  font-size: 14px;\n  line-height: 17px;\n  text-align: center;\n  letter-spacing: 0.04em;\n  text-transform: uppercase;\n  color: #fc842d;\n  @media screen and (min-device-width: 768px) {\n    margin-top: 160px;\n    margin-left: 32px;\n    text-align: start;\n  }\n`;\n\nexport default function RegistrationPage() {\n  return (\n    <div>\n      <RegisterWrapper>реєстрація</RegisterWrapper>\n      <RegisterForm />\n    </div>\n  );\n}\n"],"names":["RegisterForm","Div","styled","RegisterFormStyle","createGlobalStyle","validationSchema","yup","shape","name","min","max","required","email","password","matches","RegExp","dispatch","useDispatch","useState","setName","setEmail","setPassword","onSubmit","e","authOperations","initialValues","validateOnBlur","values","errors","touched","handleChange","handleBlur","handleSubmit","className","type","onChange","onBlur","value","placeholder","htmlFor","autoComplete","id","onClick","to","pathname","RegisterWrapper","RegistrationPage"],"sourceRoot":""}